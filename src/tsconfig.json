{
    "compilerOptions": {
        /* Visit https://aka.ms/tsconfig to read more about this file */

        /* プロジェクト */
        //"incremental": true /* インクリメンタルコンパイルを有効にし、.tsbuildinfoファイルを保存します。 */,
        // "composite": true /* プロジェクト参照を使用するための制約を有効にします。 */,
        //"tsBuildInfoFile": "./temp/ts/.tsbuildinfo" /* インクリメンタルコンパイル情報を保存する.tsbuildinfoファイルのパスを指定します。 */,

        /* Language and Environment */
        "target": "ES6" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
        "lib": ["ES2022", "ESNext"] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
        "moduleDetection": "auto" /* Control what method is used to detect module-format JS files. */,

        /* Modules */
        "module": "NodeNext" /* Specify what module code is generated. */,
        // "rootDir": "./src" /* Specify the root folder within your source files. */,
        "baseUrl": "." /* Specify the base directory to resolve non-relative module names. */,
        "paths": {
            "@/*": ["./*"],
            "@type/*": ["./types/*"],
            "@helper/*": ["./helpers/*"]
        } /* Specify a set of entries that re-map imports to additional lookup locations. */,
        //"rootDirs": ["./src"] /* Allow multiple folders to be treated as one when resolving modules. */,
        // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
        // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
        // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
        // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
        // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
        // "rewriteRelativeImportExtensions": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
        // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
        // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
        // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
        // "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
        "resolveJsonModule": true /* Enable importing .json files. */,
        // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
        // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

        /* JavaScript Support */
        //"allowJs": true /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */,
        // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
        // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

        /* Emit */
        "declaration": false /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
        // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
        // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
        // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
        // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
        //"noEmit": true /* Disable emitting files from a compilation. */,
        // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
        // "outDir": "./dist" /* Specify an output folder for all emitted files. */,
        // "removeComments": true,                           /* Disable emitting comments. */
        // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
        // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
        // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
        // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
        // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
        // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
        // "newLine": "crlf",                                /* Set the newline character for emitting files. */
        // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
        // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
        // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
        // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
        // "declarationDir": "./dist/types" /* Specify the output directory for generated declaration files. */,

        /* Interop Constraints */
        // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
        // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
        // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
        // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
        "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
        // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
        "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

        /* 型チェック */
        "strict": true /* すべての厳密な型チェックオプションを有効にします。 */,
        "noImplicitAny": true /* 暗黙的に'any'型が推論される場合にエラーを報告します。 */,
        "strictNullChecks": true /* 型チェック時に'null'および'undefined'を考慮します。 */,
        "strictFunctionTypes": true /* 関数を代入する際に、パラメータと戻り値がサブタイプ互換であることをチェックします。 */,
        "strictBindCallApply": true /* 'bind'、'call'、および'apply'メソッドの引数が元の関数と一致することをチェックします。 */,
        "strictPropertyInitialization": true /* コンストラクタで設定されていないクラスプロパティをチェックします。 */,
        "strictBuiltinIteratorReturn": true /* 組み込みのイテレータが'any'ではなく'undefined'の'TReturn'型でインスタンス化されることをチェックします。 */,
        "noImplicitThis": true /* 'this'が'any'型と推論される場合にエラーを報告します。 */,
        "useUnknownInCatchVariables": true /* 'catch'句の変数を'any'ではなく'unknown'型にします。 */,
        "alwaysStrict": true /* 常に'use strict'を出力します。 */,
        "noUnusedLocals": true /* 使用されていないローカル変数がある場合にエラーを報告します。 */,
        "noUnusedParameters": true /* 使用されていない関数パラメータがある場合にエラーを報告します。 */,
        "exactOptionalPropertyTypes": true /* オプショナルプロパティ型を記述された通りに解釈し、'undefined'を追加しません。 */,
        "noImplicitReturns": true /* 関数内で明示的に戻り値を返さないコードパスがある場合にエラーを報告します。 */,
        "noFallthroughCasesInSwitch": true /* 'switch'文でフォールスルーケースがある場合にエラーを報告します。 */,
        "noUncheckedIndexedAccess": true /* インデックスを使用してアクセスする際に型に'undefined'を追加します。 */,
        "noImplicitOverride": true /* 派生クラスでオーバーライドするメンバーにオーバーライド修飾子が付いていることを確認します。 */,
        "noPropertyAccessFromIndexSignature": true /* インデックス型で宣言されたキーに対してインデックスアクセサを使用することを強制します。 */,
        "allowUnusedLabels": false /* 使用されていないラベルに対するエラー報告を無効にします。 */,
        "allowUnreachableCode": false /* 到達不能コードに対するエラー報告を無効にします。 */,

        /* Completeness */
        // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
        "skipLibCheck": true /* Skip type checking all .d.ts files. */
    },
    "exclude": ["dist/**/*"]
}
